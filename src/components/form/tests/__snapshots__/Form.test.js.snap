// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loads some stuff 1`] = `
<KineticLib>
  <Provider
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_currentRenderer": Object {},
        "_currentRenderer2": null,
        "_currentValue": undefined,
        "_currentValue2": undefined,
        "_threadCount": 0,
      }
    }
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      }
    }
  >
    <I18nProvider>
      <Form
        dataSources={[Function]}
        fields={[Function]}
        formKey="test"
        uncontrolled={true}
      >
        <Connect(FormImplComponent)
          components={
            Immutable.Map {
              "BooleanFilter": [Function],
              "FilterLayout": [Function],
              "Body": [Function],
              "PaginationControl": [Function],
              "AttributesField": [Function],
              "BodyCell": [Function],
              "FormError": [Function],
              "TextFilter": [Function],
              "FormMultiField": [Function],
              "EmptyBodyRow": [Function],
              "UserMultiField": [Function],
              "TableField": [Function],
              "Header": [Function],
              "CodeField": [Function],
              "TextField": [Function],
              "HeaderRow": [Function],
              "TextMultiField": [Function],
              "FormLayout": [Function],
              "HeaderCell": [Function],
              "UserField": [Function],
              "FormField": [Function],
              "CheckboxField": [Function],
              "TableLayout": [Function],
              "BodyRow": [Function],
              "Footer": [Function],
              "TeamField": [Function],
              "SelectMultiField": [Function],
              "FooterCell": [Function],
              "FormButtons": [Function],
              "SelectField": [Function],
              "TeamMultiField": [Function],
              "RadioField": [Function],
              "FooterRow": [Function],
              "PasswordField": [Function],
            }
          }
          dataSources={[Function]}
          fields={[Function]}
          formKey="test"
          uncontrolled={true}
        >
          <FormImplComponent
            components={
              Immutable.Map {
                "BooleanFilter": [Function],
                "FilterLayout": [Function],
                "Body": [Function],
                "PaginationControl": [Function],
                "AttributesField": [Function],
                "BodyCell": [Function],
                "FormError": [Function],
                "TextFilter": [Function],
                "FormMultiField": [Function],
                "EmptyBodyRow": [Function],
                "UserMultiField": [Function],
                "TableField": [Function],
                "Header": [Function],
                "CodeField": [Function],
                "TextField": [Function],
                "HeaderRow": [Function],
                "TextMultiField": [Function],
                "FormLayout": [Function],
                "HeaderCell": [Function],
                "UserField": [Function],
                "FormField": [Function],
                "CheckboxField": [Function],
                "TableLayout": [Function],
                "BodyRow": [Function],
                "Footer": [Function],
                "TeamField": [Function],
                "SelectMultiField": [Function],
                "FooterCell": [Function],
                "FormButtons": [Function],
                "SelectField": [Function],
                "TeamMultiField": [Function],
                "RadioField": [Function],
                "FooterRow": [Function],
                "PasswordField": [Function],
              }
            }
            dataSources={[Function]}
            dispatch={[Function]}
            fields={[Function]}
            formKey="test"
            formState={
              Immutable.Record {
                "addFields": Immutable.List [],
                "alterFields": Immutable.Map {},
                "bindings": Object {
                  "message": 2,
                  "values": Immutable.OrderedMap {
                    "test": 2,
                  },
                },
                "dataSources": Immutable.Map {
                  "message": Immutable.Record {
                    "data": 2,
                    "fn": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                        Object {
                          "isThrow": false,
                          "value": Promise {},
                        },
                      ],
                    },
                    "params": null,
                    "paramsFn": null,
                    "prevParams": null,
                    "rawParams": Array [],
                    "status": "RESOLVED",
                    "transform": null,
                  },
                },
                "error": null,
                "fields": Immutable.OrderedMap {
                  "test": Immutable.Record {
                    "constraint": null,
                    "constraintMessage": "Invalid",
                    "dirty": false,
                    "enabled": true,
                    "errors": Immutable.List [],
                    "eventHandlers": Immutable.Map {
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                    },
                    "focused": false,
                    "functions": Immutable.Map {
                      "enabled": null,
                      "label": null,
                      "options": null,
                      "placeholder": null,
                      "required": null,
                      "search": null,
                      "transient": null,
                      "visible": null,
                    },
                    "helpText": "",
                    "id": "dGVzdCB0ZXN0",
                    "initialValue": 2,
                    "label": "",
                    "language": "",
                    "name": "test",
                    "onChange": null,
                    "options": Immutable.List [],
                    "pattern": null,
                    "patternMessage": "Invalid format",
                    "placeholder": "",
                    "renderAttributes": Immutable.Map {},
                    "required": false,
                    "requiredMessage": "This field is required",
                    "search": Immutable.Map {},
                    "serialize": null,
                    "touched": false,
                    "transient": false,
                    "type": "text",
                    "valid": true,
                    "value": 2,
                    "visible": true,
                  },
                },
                "fieldsFn": [Function],
                "formKey": "test",
                "formOptions": Immutable.Map {},
                "initialValuesFn": null,
                "onError": null,
                "onSave": null,
                "onSubmit": null,
                "submitting": false,
              }
            }
            uncontrolled={true}
          >
            <div
              data-testid="initialized-wrapper"
            >
              <FormLayout
                bindings={
                  Object {
                    "message": 2,
                    "values": Immutable.OrderedMap {
                      "test": 2,
                    },
                  }
                }
                buttons={
                  <FormButtons
                    clearError={[Function]}
                    dirty={false}
                    error={null}
                    formOptions={Immutable.Map {}}
                    reset={[Function]}
                    submit={[Function]}
                    submitting={false}
                  />
                }
                dirty={false}
                error={null}
                fields={
                  Immutable.OrderedMap {
                    "test": <TextField
                      dirty={false}
                      enabled={true}
                      errors={Immutable.List []}
                      focusRef={null}
                      focused={false}
                      helpText=""
                      id="dGVzdCB0ZXN0"
                      label=""
                      name="test"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      options={Immutable.List []}
                      placeholder=""
                      renderAttributes={Immutable.Map {}}
                      required={false}
                      touched={false}
                      value={2}
                      visible={true}
                    />,
                  }
                }
                formOptions={Immutable.Map {}}
                meta={
                  Immutable.OrderedMap {
                    "test": Immutable.Map {
                      "visible": true,
                    },
                  }
                }
              >
                <form>
                  <TextField
                    dirty={false}
                    enabled={true}
                    errors={Immutable.List []}
                    focusRef={null}
                    focused={false}
                    helpText=""
                    id="dGVzdCB0ZXN0"
                    key="test"
                    label=""
                    name="test"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    options={Immutable.List []}
                    placeholder=""
                    renderAttributes={Immutable.Map {}}
                    required={false}
                    touched={false}
                    value={2}
                    visible={true}
                  >
                    <div
                      className="field"
                    >
                      <label
                        htmlFor="dGVzdCB0ZXN0"
                      />
                      <input
                        id="dGVzdCB0ZXN0"
                        name="test"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="text"
                        value={2}
                      />
                    </div>
                  </TextField>
                  <FormButtons
                    clearError={[Function]}
                    dirty={false}
                    error={null}
                    formOptions={Immutable.Map {}}
                    reset={[Function]}
                    submit={[Function]}
                    submitting={false}
                  >
                    <div>
                      <button
                        disabled={true}
                        onClick={[Function]}
                        type="submit"
                      >
                        Submit
                      </button>
                    </div>
                  </FormButtons>
                </form>
              </FormLayout>
            </div>
          </FormImplComponent>
        </Connect(FormImplComponent)>
      </Form>
    </I18nProvider>
  </Provider>
</KineticLib>
`;
