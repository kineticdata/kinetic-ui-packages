// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`handleSubmit happy path 1`] = `
<FormLayout
  bindings={
    Object {
      "values": Immutable.OrderedMap {
        "test2": "",
      },
    }
  }
  buttons={
    <FormButtons
      clearError={[Function]}
      dirty={false}
      error={null}
      formOptions={
        Object {
          "testOption": "Foo",
        }
      }
      reset={[Function]}
      submit={[Function]}
      submitting={true}
    />
  }
  dirty={false}
  error={null}
  fields={
    Immutable.OrderedMap {
      "test2": <TextField
        dirty={false}
        enabled={true}
        errors={Immutable.List []}
        focusRef={null}
        focused={false}
        helpText=""
        id="dGVzdCB0ZXN0Mg"
        label=""
        name="test2"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        options={Immutable.List []}
        placeholder=""
        renderAttributes={Immutable.Map {}}
        required={false}
        touched={false}
        value=""
        visible={true}
      />,
    }
  }
  formOptions={
    Object {
      "testOption": "Foo",
    }
  }
  meta={
    Immutable.OrderedMap {
      "test2": Immutable.Map {
        "visible": true,
      },
    }
  }
/>
`;

exports[`handleSubmit happy path 2`] = `
<FormLayout
  bindings={
    Object {
      "values": Immutable.OrderedMap {
        "test2": "",
      },
    }
  }
  buttons={
    <FormButtons
      clearError={[Function]}
      dirty={false}
      error={null}
      formOptions={
        Object {
          "testOption": "Foo",
        }
      }
      reset={[Function]}
      submit={[Function]}
      submitting={false}
    />
  }
  dirty={false}
  error={null}
  fields={
    Immutable.OrderedMap {
      "test2": <TextField
        dirty={false}
        enabled={true}
        errors={Immutable.List []}
        focusRef={null}
        focused={false}
        helpText=""
        id="dGVzdCB0ZXN0Mg"
        label=""
        name="test2"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        options={Immutable.List []}
        placeholder=""
        renderAttributes={Immutable.Map {}}
        required={false}
        touched={false}
        value=""
        visible={true}
      />,
    }
  }
  formOptions={
    Object {
      "testOption": "Foo",
    }
  }
  meta={
    Immutable.OrderedMap {
      "test2": Immutable.Map {
        "visible": true,
      },
    }
  }
/>
`;

exports[`handleSubmit happy path 3`] = `
Array [
  Array [
    Object {
      "testOption": "Foo",
    },
  ],
]
`;

exports[`handleSubmit happy path 4`] = `
Array [
  Array [
    Object {
      "testOption": "Foo",
    },
  ],
]
`;

exports[`handleSubmit happy path 5`] = `
Array [
  Array [
    Immutable.OrderedMap {
      "test2": "",
    },
    Object {
      "values": Immutable.OrderedMap {
        "test2": "",
      },
    },
  ],
  Array [],
]
`;

exports[`handleSubmit happy path 6`] = `
Array [
  Array [
    "Success!",
  ],
]
`;

exports[`handleSubmit submit error 1`] = `
<FormLayout
  bindings={
    Object {
      "values": Immutable.OrderedMap {},
    }
  }
  buttons={
    <FormButtons
      clearError={[Function]}
      dirty={false}
      error="This is a test error"
      formOptions={Object {}}
      reset={[Function]}
      submit={[Function]}
      submitting={false}
    />
  }
  dirty={false}
  error={
    <FormError
      clear={[Function]}
      error="This is a test error"
    />
  }
  fields={Immutable.OrderedMap {}}
  formOptions={Object {}}
  meta={Immutable.OrderedMap {}}
/>
`;

exports[`handleSubmit submit error calls onError 1`] = `
Array [
  Array [
    Object {
      "testOption": "Foo",
    },
  ],
]
`;

exports[`handleSubmit submit error calls onError 2`] = `
Array [
  Array [
    "TEST ERROR",
  ],
]
`;

exports[`handleSubmit submit unexpected error, we expect the promise to reject with a string 1`] = `
<FormLayout
  bindings={
    Object {
      "values": Immutable.OrderedMap {},
    }
  }
  buttons={
    <FormButtons
      clearError={[Function]}
      dirty={false}
      error="Unexpected error occurred"
      formOptions={Object {}}
      reset={[Function]}
      submit={[Function]}
      submitting={false}
    />
  }
  dirty={false}
  error={
    <FormError
      clear={[Function]}
      error="Unexpected error occurred"
    />
  }
  fields={Immutable.OrderedMap {}}
  formOptions={Object {}}
  meta={Immutable.OrderedMap {}}
/>
`;

exports[`simple data source dependencies 1`] = `
<FormLayout
  bindings={
    Object {
      "dependency": "Test Arg",
      "message": "Hello World!",
      "values": Immutable.OrderedMap {
        "test": "Hello World!",
      },
    }
  }
  buttons={
    <FormButtons
      clearError={[Function]}
      dirty={false}
      error={null}
      formOptions={Object {}}
      reset={[Function]}
      submit={[Function]}
      submitting={false}
    />
  }
  dirty={false}
  error={null}
  fields={
    Immutable.OrderedMap {
      "test": <TextField
        dirty={false}
        enabled={true}
        errors={Immutable.List []}
        focusRef={null}
        focused={false}
        helpText=""
        id="dGVzdCB0ZXN0"
        label=""
        name="test"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        options={Immutable.List []}
        placeholder=""
        renderAttributes={Immutable.Map {}}
        required={false}
        touched={false}
        value="Hello World!"
        visible={true}
      />,
    }
  }
  formOptions={Object {}}
  meta={
    Immutable.OrderedMap {
      "test": Immutable.Map {
        "visible": true,
      },
    }
  }
/>
`;

exports[`simple data source dependencies 2`] = `
Array [
  Array [],
]
`;

exports[`simple data source dependencies 3`] = `
Array [
  Array [
    "Test Arg",
  ],
]
`;

exports[`simple data source dependencies 4`] = `
Array [
  Array [
    Object {},
  ],
  Array [
    Object {
      "dependency": "Test Arg",
    },
  ],
  Array [
    Object {
      "dependency": "Test Arg",
      "message": "Hello World!",
      "values": Immutable.OrderedMap {
        "test": "Hello World!",
      },
    },
  ],
]
`;
